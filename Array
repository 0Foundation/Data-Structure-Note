连续存储数组
看懂程序
pArr->pBase[0]=1;cnt=1
pArr->pBase[1]=2;cnt=2
pArr->pBase[2]=3;cnt=3

pArr->pBase[cnt]=val;
++cnt;

全部程序:
#include <stdio.h>
#include <stdlib.h>//包含了exit函数
#include <malloc.h>//包含了malloc函数
//定义了一个数据类型,该数据类型的名字叫做struct Arr,
//该数据类型有三个变量
struct Arr
{
    int * pBase;//数组中第一个元素上的地址
    int len;//数组所能容纳的最大的元素个数
    int cnt;//目前数组中有效元素的个数
    int increment;//自动增长因子
};
void init_arr(struct Arr * pArr,int length );
bool append_arr(struct Arr * pArr,int val);//追加,val是要追加的值
bool insert_arr(struct Arr * pArr,int pos,int val);//pos具体是哪儿,需要写帮助文档,pos的值从1开始.插入值在pos前面
bool delete_arr(struct Arr * pArr,int pos,int* pVal);
int get(struct Arr * pArr,int pos);
bool is_empty(struct Arr * pArr);
bool is_full(struct Arr * pArr);
void sort_arr(struct Arr * pArr);//排序
void show_arr(struct Arr * pArr);
void inversion_arr(struct Arr * pArr);
int main()
{
    struct Arr arr;//已经分配内存,但没有生成数组,pBase,cnt,len都是垃圾数字
    int val;
    int geti;
    init_arr(&arr,6);//一定要传参数,来分别到底初始化谁
   // printf("%d\n",arr.len);
    //show_arr(&arr);
    append_arr(&arr,1);
    append_arr(&arr,66);
    append_arr(&arr,3);
    append_arr(&arr,8);
  //  show_arr(&arr);
    geti=get(&arr,2);
    printf("%d\n",geti);
   /* if(delete_arr(&arr,1,&val))
    {
        printf("delete success!\n");
        printf("deleted val=%d\n",val);
    }
    else
        printf("delete failed!\n");
*/
/*  append_arr(&arr,5);

    if(insert_arr(&arr,3,99))
        printf("insert success!\n");
    else
        printf("insert failed!\n");
    if(append_arr(&arr,8))
    {
        printf("append success!\n");
    }
    else
    {
        printf("append failed!\n");
    }
*/
    show_arr(&arr);
    printf("****************\n");
    inversion_arr(&arr);
    show_arr(&arr);
    printf("*****************\n");
    sort_arr(&arr);
    show_arr(&arr);
    return 0;
}
void init_arr(struct Arr * pArr,int length )//被调函数想要修改主函数中变量的值,要接收主函数中变量的地址
{
    //pArr这个结构体指针,指向的结构体中的pBase成员变量
   pArr->pBase=(int * )malloc(sizeof(int)* length);
   if(NULL==pArr->pBase)
   {
       printf("malloc failed!\n");
       exit(-1);//终止整个程序
   }
   else
   {
       pArr->len=length;
       pArr->cnt=0;
   }
   return;
}
bool is_empty(struct Arr * pArr)
{

    if(0==pArr->cnt)
        return true;
    else
        return false;
}
void show_arr(struct Arr * pArr)
{   //输出前先检查数组是否为空
    /*
    if(数组为空)
        提示用户数组为空
    else
        输出数组的有效内容
    */
    if(is_empty(pArr))//is_empty()这个函数中所需要的参数是struct Arr *类型,pArr已经是struct Arr *类型,所以直接传递pArr
    {
        printf("arr is empty!\n");
    }
    else
    {
        for(int i=0;i<pArr->cnt;i++)
        {
            printf("%d  ",pArr->pBase[i]);//[i]前面一定要是int* 类型
//要输出的是个int类型,pArr是struct Arr *类型,(*pArr)是struct Arr类型,要用循环输出这个数组的值,就要找到数组的首地址,首地址是pBase,那么就用pArr这个结构体变量指向结构体中的成员变量pBase:pArr->pBase,这样一来pArr->pBase[i]就是*(pArr->pBase+i)

        }
        printf("\n");
    }
    return;

}
bool is_full(struct Arr * pArr)
{
    if(pArr->cnt==pArr->len)
        return true;
    else
        return false;
}
bool append_arr(struct Arr * pArr,int val)
{
    //满时返回false;
    if(is_full(pArr))
        return false;
     //不满时追加
     pArr->pBase[pArr->cnt]=val;
     (pArr->cnt)++;
     return true;
}
bool insert_arr(struct Arr * pArr,int pos,int val)
{
    int i;
    if(is_full(pArr))
        return false;
    if(pos<1||pos>pArr->cnt+1)
        return false;
    for(i=pArr->cnt-1;i>=pos-1;--i)
    {
        pArr->pBase[i+1]=pArr->pBase[i];
    }
    pArr->pBase[pos-1]=val;
    (pArr->cnt)++;//插入值后不要忘记cnt++
    return true;

}
bool delete_arr(struct Arr * pArr,int pos,int * pVal)
{
    if(is_empty(pArr))
        return false;
    if(pos<1||pos>pArr->cnt)
        return false;
    (*pVal)=pArr->pBase[pos-1];
    for(int i=pos;i<pArr->cnt;i++)
    {
        pArr->pBase[i-1]=pArr->pBase[i];
    }
    pArr->cnt--;
    return true;

}
int get(struct Arr * pArr,int pos)
{
   return  pArr->pBase[pos-1];
}
void inversion_arr(struct Arr * pArr)
{
    int i=0;
    int j=pArr->cnt-1;
    int t;

    while (i<j)
    {
        t=pArr->pBase[i];
        pArr->pBase[i]=pArr->pBase[j];
        pArr->pBase[j]=t;
        ++i;
        --j;

    }
    return;
}
void sort_arr(struct Arr * pArr)
{
    int i,j,t;
    for(i=0;i<pArr->cnt;i++)
    {
        for(j=i+1;j<pArr->cnt;j++)
        {
            if(pArr->pBase[i]>pArr->pBase[j])
            {
                t=pArr->pBase[i];
                pArr->pBase[i]=pArr->pBase[j];
                pArr->pBase[j]=t;

            }
        }
    }
}
