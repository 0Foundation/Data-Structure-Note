递归
1.不同函数之间调用
#include <iostream>
#include <stdio.h>

using namespace std;
void f();
void g();
void k();
void f()
{
     printf("FFFF\n");
     g();
     printf("1111\n");
}
void g()
{
    printf("GGGG\n");
    k();
    printf("2222\n");
}
void k()
{
     printf("KKKK\n");

}
int main()
{
    f();

    return 0;
}
2.自己调用自己
#include <iostream>
#include <stdio.h>

using namespace std;

void f(int n)
{
    if(n==1)
    {
        printf("haha!\n");
    }
    else
    {
        f(n-1);
    }


}
int main()
{
    f(3);

    return 0;
}
3.阶乘的实现
#include <iostream>
#include <stdio.h>
using namespace std;
//假定n的值是1或者大于1的值
long f(long n)
//n的阶乘要借助n-1的阶乘来解决,n-1要借助n-2,n-2要借助n-3....直到最后n=1时候返回1,因为n=2要借助n=1来解决,so n=2解决->n=3解决->......n的阶乘解决
{
    if(1==n)
    {
        return 1;
    }
    else
    {
        return f(n-1)*n;
    }


}
int main()
{

    printf("%d\n",f(6));
    return 0;
}

4.1+2+3+....+100的和
#include <iostream>
#include <stdio.h>

using namespace std;

long  sum(int n)
{
    if(1==n)
        return 1;
    else
        return sum(n-1)+n;
}
int main()
{
    printf("%ld\n",sum(100));

    return 0;
}
函数如何调用另外一个函数:计算机内部操作
1.调用函数的详解
按照"后调用先返回"的原则,就是后调用的先终止,借用栈来实现,调用一个函数时,就在栈顶分配一个存储区,进行压栈操作,当函数执行完毕,释放函数所占空间,进行出栈操作.
当前运行的函数永远在栈顶!
#include <iostream>
#include <stdio.h>

using namespace std;
int f(int n)//第二步:为n局部变量分配存储空间
{           //第三步:将控制转移到被调函数入口
    n+=2;
    return n;//first:保存被调函数的返回结果
            //second:释放被调函数所占的静态存储空间
            //third:依据最开始传过来的下一句语句的地址来执行下一语句
}
int main()
{
    int val;
    val=f(5);//第一步:把5这个参数和下一句printf语句的地址传给被调函数
    printf("val=%d\n",val);

    return 0;
}

汉诺塔
ABC三个柱子
123三个盘子
1:A->C
2:A->B
1:C->B
3:A->C
1:B->A
2:B->C
1:A->C

伪算法:
if(n>1)
{
	先把a柱子上的前n-1个盘子从a借助c移到b
	将a柱子上的第n个盘子直接移到c
	再将b柱子上的n-1个盘子借助a移到c
}
程序:
#include <iostream>
#include <stdio.h>

using namespace std;
void Hanio(int n,char a,char b,char c)
{
   /* 如果是一个盘子
        直接将a柱子上的盘子从a移到c上
    否则
        先将a柱子上的n-1个盘子借助c移到b
        直接将a柱子上的盘子从a移到c
        最后将b柱子上的n-1个盘子借助a移到c
        */
    if(1==n)
    {
        printf(" take No.%d plate from %c to %c\n ",n,a,c);
    }
    else
    {
        Hanio(n-1,a,c,b);
        printf("take No.%d plate from %c to %c\n ",n,a,c);
        Hanio(n-1,b,a,c);
    }
}
int main(void)
{
    char ch1='A';
    char ch2='B';
    char ch3='C';
    int n;
    printf("please input plate's number:");
    scanf("%d",&n);

    Hanio(n,ch1,ch2,ch3);

    return 0;
}




