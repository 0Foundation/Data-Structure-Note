队列
#include <iostream>
#include <stdio.h>
#include <malloc.h>


using namespace std;
typedef struct Queue//整型数组
{
    int * pBase;//数组首地址
    int front;//代表的是数组的下标
    int rear;//代表的是数组的下标

}QUEUE;
void init(QUEUE * pQ);
bool en_queue(QUEUE * pQ,int val);
void traverse_queue(QUEUE * pQ);
bool full_queue(QUEUE * pQ);
bool out_queue(QUEUE * pQ, int * pval);
bool empty_queue(QUEUE * pQ);
int main(void )
{
    QUEUE Q;
    int val;
    init(&Q);
    en_queue(&Q,1);
    en_queue(&Q,2);
    en_queue(&Q,3);
    en_queue(&Q,4);
    en_queue(&Q,5);
    en_queue(&Q,6);

    traverse_queue(&Q);
    if(out_queue(&Q, &val))
    {
        printf("out atom is %d  \n",val);
    }
    else
    {
        printf("out_queue failed!\n");
    }
    traverse_queue(&Q);

    return 0;
}
void init(QUEUE * pQ)
{
    pQ->pBase=(int *)malloc(sizeof(int)* 6);
    pQ->front=0;
    pQ->rear=0;
    return ;
}
bool full_queue(QUEUE* pQ)
{
    if((pQ->rear+1)%6==pQ->front)
        return true;
    else
        return false;

}
void traverse_queue(QUEUE * pQ)
{
    int i=pQ->front;
    while (i!=pQ->rear)
    {
        printf("%d   ",pQ->pBase[i]);
        i=(i+1)%6;
    }
    printf("\n");
    return;
}
bool en_queue(QUEUE * pQ,int val)
{
    if(full_queue(pQ))
    {
        return false;

    }
    else
    {
        pQ->pBase[pQ->rear]=val;
        pQ->rear=(pQ->rear+1)%6;
        return true;
    }

}
bool empty_queue(QUEUE * pQ)
{
    if(pQ->front==pQ->rear)
    {
        return true;

    }
    else
    {
        return false;
    }
}
bool out_queue(QUEUE * pQ, int * pval)
{
    if(empty_queue(pQ))
        return false;
    else
    {
        *pval=pQ->pBase[pQ->front];
        pQ->front=(pQ->front+1)%6;
        return true;
    }
}
